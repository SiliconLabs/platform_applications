name: SonarQube-Scan

on:
  pull_request_target:
    types: [opened, synchronize, edited]

env:
  SL_SLC_PATH: ${{ github.workspace }}/tools/slc_cli/slc
  CI_REPO_DIR: ${{ github.workspace }}/application_examples_ci
  SL_STUDIO_BUILD_PATH: ${{ github.workspace }}/tools/SimplicityStudio_v5
  STUDIO_ADAPTER_PACK_PATH: ${{ github.workspace }}/tools/SimplicityStudio_v5/developer/adapter_packs
  POST_BUILD_EXE: ${{ github.workspace }}/tools/SimplicityStudio_v5/developer/adapter_packs/commander/commander
  WORKSPACE: ${{ github.workspace }}

jobs:
  sonarqube_scan:
    if: github.repository_visibility != 'public'
    runs-on: silabs-internal
    steps:
    - name: Get repository name
      run: |
        REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d "/" -f 2)
        echo "repo=$REPO_NAME" >> $GITHUB_ENV
    - name: Create GitHub App Token
      id: app-token
      uses: actions/create-github-app-token@v1
      with:
        app-id: ${{ vars.GH_APP_ID }}
        private-key: ${{ secrets.GH_APP_PRIVATE_KEY }}
        owner: ${{ github.repository_owner }}
    - name: Checkout code repository
      uses: actions/checkout@v4
      with:
        repository: ${{ github.repository  }}
        token: ${{ steps.app-token.outputs.token }}
        path: 'projects'
    - name: Checkout tools repository
      uses: actions/checkout@v4
      with:
        repository: SiliconLabsSoftware/aep_ci_tools
        ref: 'hop_dev'
        token: ${{ steps.app-token.outputs.token }}
        path: 'aep_ci_tools'
    - name: Check the changes
      id: pr_check
      run: |
        cd projects
        bash ${{ github.workspace }}/aep_ci_tools/scripts/check_pr_changes.sh \
        ${{ github.base_ref }} ${{ github.event.pull_request.number }} \
        ${{ github.event.pull_request.head.sha }} ${{ github.event.pull_request.base.sha  }}
        echo ==Changes files:==
        cat git_diff.txt
        if [ ! -s changed_projects_folder.txt ]; then
          echo "has_changes=false" >> $GITHUB_OUTPUT
          echo "===> No project changes detected...........Skipped"
          exit 0
        fi
        echo "has_changes=true" >> $GITHUB_OUTPUT
        echo ==Changed projects:==
        cat changed_projects_folder.txt
    - name: Setup Java
      if: ${{ steps.pr_check.outputs.has_changes == 'true' }}
      uses: actions/setup-java@v4
      with:
        distribution: 'oracle'
        java-version: '21'
    - name: Install Dependencies
      if: ${{ steps.pr_check.outputs.has_changes == 'true' }}
      run: bash ${{ github.workspace }}/aep_ci_tools/scripts/install_tools.sh
    - name: Download and install SonarQube scanner
      if: ${{ steps.pr_check.outputs.has_changes == 'true' }}
      run: |
        curl -L -o sonar-scanner-cli.zip -k \
        https://github.com/SiliconLabs/application_examples_ci/releases/download/v1.0/sonar-scanner-cli-6.2.1.4610-linux-x64.zip
        unzip sonar-scanner-cli.zip -d aep_ci_tools
        rm sonar-scanner-cli.zip
    - name: Install Build Wrapper
      if: ${{ steps.pr_check.outputs.has_changes == 'true' }}
      uses: SonarSource/sonarqube-scan-action/install-build-wrapper@v4
    - name: Run build-wrapper
      if: ${{ steps.pr_check.outputs.has_changes == 'true' }}
      run: |
        mkdir changed_projects
        while read line; do cp -r ./projects/$line --parents ./changed_projects; \
        done < ${{ github.workspace}}/projects/changed_projects_folder.txt
        export CHECK_SONARQUBE=1
        build-wrapper-linux-x86-64 --out-dir wrapper_out python3 -u \
        ${{ github.workspace}}/aep_ci_tools/scripts/checkproject.py \
        --release --slcpgcc ${{ github.workspace}}/changed_projects
    - name: Prepare included sources
      if: ${{ steps.pr_check.outputs.has_changes == 'true' }}
      run: |
        # Scan list .c and .h files
        find changed_projects -name *.c -o -name *.h > source_list.txt
        # Combine into a variable
        rm -rf source_list2.txt
        while read line; do echo **/$(basename $line) >> source_list2.txt; done < source_list.txt
        combile=''
        while read line
        do
          combile+=$line,
        done < source_list2.txt
        # Remove last comma (,)
        included_sources=${combile%?}
        echo "==============sonar.inclusions:==================="
        echo $included_sources
        echo "=================================================="
        echo "sonar_inclusions=$included_sources" >> $GITHUB_ENV
    - name: Run SonarQube scanner
      if: ${{ steps.pr_check.outputs.has_changes == 'true' }}
      run: |
        ${{ github.workspace}}/aep_ci_tools/sonar-scanner-6.2.1.4610-linux-x64/bin/sonar-scanner \
        -D"sonar.verbose=true" -D"sonar.qualitygate.wait=True" \
        -D"sonar.cfamily.build-wrapper-output=wrapper_out" \
        -D"sonar.branch.name=${{ github.event.pull_request.head.ref }}" -D"sonar.scm.disabled=True" \
        -D"sonar.projectName=${{ env.repo }}" -D"sonar.projectKey=${{ env.repo }}" \
        -D"sonar.projectBaseDir=ws" -D"sonar.sources=." \
        -D"sonar.inclusions=${{ env.sonar_inclusions }}" -D"sonar.host.url=https://sonarqube.silabs.net" \
        -D"sonar.token=${{ secrets.SONAR_TOKEN }}" -D"sonar.cfamily.threads=4" \
        -D"sonar.language=c" -D"sonar.cfamily.cache.enabled=false" \
        -D"sonar.exclusions=**/autogen/**,**gecko_sdk_**,**simplicity_sdk**,**/config/**,**/*.html, .metadata, .scannerwork, .metadata/**" > sonar_log.txt
      continue-on-error: true
    - name: Upload Scanner report
      if: ${{ steps.pr_check.outputs.has_changes == 'true' }}
      uses: actions/upload-artifact@v4
      with:
        name: sonar_log
        path: sonar_log.txt
        retention-days: 90
    - name: Check log file to set status of the job
      if: ${{ steps.pr_check.outputs.has_changes == 'true' }}
      run: |
        echo =========================================
        echo "Check report here: https://sonarqube.silabs.net/dashboard?id=${{ env.repo }}&branch=${{ github.event.pull_request.head.ref }}"
        echo =========================================
        if grep -qe "EXECUTION SUCCESS" sonar_log.txt; then
          echo "Result: Success"
          echo =========================================
          exit 0
        else
          echo "Result: Failure"
          echo =========================================
          exit 1
        fi
